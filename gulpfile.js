// Libs
var fs        = require('fs')
 ,  path      = require('path')
 ,  _         = require('lodash')
 ,  gulp      = require('gulp')
 ,  gutil     = require('gulp-util')
 ,  rename    = require('gulp-rename')
 ,  open      = require('gulp-open')
 ,  cssmin    = require('gulp-clean-css')
 ,  less      = require('gulp-less')
 ,  seq       = require('run-sequence')
 ,  svgsize   = require('./lib/gulp/svgsize')
 ,  normalize = require('./lib/gulp/normalize')
 ,  webfont   = require('./lib/gulp/webfont')
 ,  release   = require('./lib/gulp/release')

// Configs
var fontName  = 'upplication-icons'
 ,  fontNameWingu = 'wingu-icons'
 ,  iconClass = 'icon'

// Path shorthands
var srcPath        = './lib'
 ,  dstPath        = './dist'
 ,  srcIconsPath   = path.join(__dirname, srcPath, 'icons/*.svg')
 ,  srcIconsPathWingu   = path.join(__dirname, srcPath, 'iconswingu/*.svg')
 ,  srcHtmlTpl     = path.join(__dirname, srcPath, 'index.html.tpl')
 ,  dstHtmlUpplication    = path.join(__dirname, dstPath, 'indexupplication.html')
 ,  dstHtmlWingu    = path.join(__dirname, dstPath, 'indexwingu.html')
 ,  dstJsonMapFileUpp = path.join(__dirname, dstPath, 'upplicationiconmap.json')
 ,  dstJsonMapFileWingu = path.join(__dirname, dstPath, 'winguiconmap.json')
 ,  srcCssTpl      = path.join(__dirname, srcPath, 'iconfont.less.tpl')
 ,  dstCssFile     = path.join(__dirname, dstPath, fontName + '.css')
 ,  dstCssFileWingu     = path.join(__dirname, dstPath, fontNameWingu + '.css')
var glyphs = [] // For sharing data among tasks
var glyphswingu = []

gulp.task('svgs', function() {
    return gulp.src([ srcIconsPath ])
    .pipe(normalize())
    .pipe(gulp.dest('./meh'))
})

/**
 * Generates a css file containing a base64 encoded version
 * of the font generated by the given svg icons
 */
gulp.task('webfont', function() {
    return gulp.src([ srcIconsPath ])
        .pipe(svgsize())
        .pipe(webfont({
            fontName: fontName,
            iconClass: iconClass,
            cssTemplate: srcCssTpl,
            extension: 'less',
            centerHorizontally: true,
            fixedWidth: true,
            normalize: true
        }))
        .on('glyphs', function(g) {
            glyphs = g
            gutil.log('Generated webfont', gutil.colors.green(fontName), 'with', gutil.colors.cyan(g.length), 'glyphs')
        })
        .pipe(gulp.dest(dstPath))
        .pipe(less())
        .pipe(gulp.dest(dstPath))
});
gulp.task('webfontwingu', function() {
    return gulp.src([ srcIconsPathWingu ])
        .pipe(svgsize())
        .pipe(webfont({
            fontName: fontNameWingu,
            iconClass: iconClass,
            cssTemplate: srcCssTpl,
            extension: 'less',
            centerHorizontally: true,
            fixedWidth: true,
            normalize: true,
        }))
        .on('glyphs', function(g) {
            glyphswingu = g
            gutil.log('Generated webfont', gutil.colors.green(fontNameWingu), 'with', gutil.colors.cyan(g.length), 'glyphs')
        })
        .pipe(gulp.dest(dstPath))
        .pipe(less())
        .pipe(gulp.dest(dstPath))
});
gulp.task('webfont-json-map', function(cb) {
    var glyphMap = _.keyBy(glyphs, 'name')
    var glyphMapWingu = _.keyBy(glyphswingu, 'name')
    fs.writeFileSync(dstJsonMapFileUpp, JSON.stringify(glyphMap))
    fs.writeFileSync(dstJsonMapFileWingu, JSON.stringify(glyphMapWingu))
    cb()
});

gulp.task('minify', function(cb) {
    gulp.src(dstCssFile)
        .pipe(cssmin({ compatibility: 'ie8' }))
        .pipe(rename({ extname: '.min.css' }))
        .pipe(gulp.dest(dstPath))
    gulp.src(dstCssFileWingu)
        .pipe(cssmin({ compatibility: 'ie8' }))
        .pipe(rename({ extname: '.min.css' }))
        .pipe(gulp.dest(dstPath))
    cb()
})

gulp.task('demogen', function(cb) {
    var htmlTemplate = fs.readFileSync(srcHtmlTpl, 'utf8');
    var htmlCompiler = _.template(htmlTemplate);
    var htmlCompiled = htmlCompiler({
        fontName: fontName,
        iconClass: iconClass,
        glyphs: glyphs
    });
    var htmlCompiledWingu = htmlCompiler({
        fontName: fontNameWingu,
        iconClass: iconClass,
        glyphs: glyphswingu
    });
    fs.writeFileSync(dstHtmlUpplication, htmlCompiled);
    fs.writeFileSync(dstHtmlWingu, htmlCompiledWingu);
    cb()
})

gulp.task('demo', function(cb) {
    gulp.src(dstHtmlUpplication)
        .pipe(open());
    gulp.src(dstHtmlWingu)
        .pipe(open());
    cb()
})

gulp.task('gitwork', release())

gulp.task('version', function(cb) {
    seq('webfont',
        'webfont-json-map',
        'minify',
        'demogen',
        'gitwork',
        cb
    );
})

gulp.task('default', function(cb) {
    seq('webfont',
        'webfontwingu',
        'webfont-json-map',
        'minify',
        'demogen',
        'demo',
        cb
    );
});